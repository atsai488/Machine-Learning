# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vp6fVH0gOw66FRH9a8wI_tLXLGjDX72y
"""

from torch import nn
import torch
class LinearRegressionModel(nn.Module):
  def __init__(self):
    super().__init__()
    self.weights = nn.Parameter(torch.randn(1, requires_grad=True, dtype=torch.float))
    self.bias = nn.Parameter(torch.randn(1, requires_grad=True, dtype=torch.float))

  def forward(self, x:torch.Tensor) -> torch.Tensor:
    return self.weights * x + self.bias

torch.manual_seed(42)

model_0 = LinearRegressionModel()

start = 0
end = 1
step = 0.02
x = torch.arange(start, end, step).unsqueeze(dim=1)
y = 0.7 * x + 0.3

train_split = int(0.8*len(x))
x_train, y_train = x[:train_split], y[:train_split]
x_test, y_test = x[train_split:], y[train_split:]

import matplotlib.pyplot as plt
def plot_predictions(train_data = x_train,
                     train_labels = y_train,
                     test_data = x_test,
                     test_labels = y_test,
                     predictions = None):
  plt.figure(figsize=(10,7))
  plt.scatter(train_data, train_labels, c='b', s = 4, label = "Training Data")
  plt.scatter(test_data, test_labels, c = 'g', s= 4, label = "Testing Data")
  if predictions is not None:
    plt.scatter(test_data, predictions, c = 'r', s = 4, label = "Predictions")
  plt.legend(prop={"size": 14})

plot_predictions()

with torch.inference_mode():
  y_preds = model_0(x_test)

plot_predictions(predictions=y_preds)

loss_fn = torch.nn.L1Loss()

optimizer = torch.optim.SGD(params=model_0.parameters(),
                            lr = 0.01)

epochs = 200

epoch_count = []
loss_values = []
test_loss_values = []

for epoch in range(epochs):
  model_0.train()

  y_pred = model_0(x_train)

  loss = loss_fn(y_pred, y_train)

  optimizer.zero_grad()
  loss.backward()

  optimizer.step()

  model_0.eval()

  with torch.inference_mode():
    test_predict = model_0(x_test)
    test_loss = loss_fn(test_predict, y_test)
  if epoch % 10 == 0:
    epoch_count.append(epoch)
    loss_values.append(loss)
    test_loss_values.append(test_loss)
    print(f"Epoch {epoch} | Loss {loss} | test_loss {test_loss}")

with torch.inference_mode():
  new_y_pred = model_0(x_test)
plot_predictions(predictions=new_y_pred)



import numpy as np

loss_values = np.array(torch.tensor(loss_values).numpy())
test_values = np.array(test_loss_values)

plt.plot(epoch_count, loss_values, label="training loss",)
plt.plot(epoch_count, test_loss_values, label = "testing loss")
plt.title("training and testing loss")
plt.ylabel("loss")
plt.xlabel("epoch")
plt.legend()

from pathlib import Path
MODEL_PATH = Path("models")
MODEL_PATH.mkdir(parents=True, exist_ok=True)

MODEL_NAME = "first_linear_regression_model"
MODEL_SAVE_PATH = MODEL_PATH / MODEL_NAME
MODEL_SAVE_PATH

torch.save(model_0.state_dict(), MODEL_SAVE_PATH)

loaded_model = LinearRegressionModel()

loaded_model.load_state_dict(torch.load(f=MODEL_SAVE_PATH))

loaded_model.eval()
with torch.inference_mode():
  loaded_model_pred = loaded_model(x_test)

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Device: {device}")

class LinearRegressionModelV2(nn.Module):
  def __init__(self):
    super().__init__()
    self.linear_layer = nn.Linear(in_features = 1, out_features=1)

  def forward(self, x: torch.Tensor) -> torch.Tensor:
    return self.linear_layer(x)

torch.manual_seed(42)
model_1 = LinearRegressionModelV2()
model_1.state_dict()

loss_fn = nn.L1Loss()
optimizer = torch.optim.SGD(params=model_1.parameters(), lr = 0.01)

epochs = 100
for epoch in range(epochs):
  model_1.train()
  y_pred = model_1(x_train)
  loss = loss_fn(y_pred, y_train)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

model_1.eval()
with torch.inference_mode():
  model_pred = model_1(x_test)
model_pred, y_test